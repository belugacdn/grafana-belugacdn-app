{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["_","CryptoJS","moment","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","tokenObj","currentDimension","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","target","rStart","Math","round","Date","parse","range","from","_d","toString","rEnd","to","timeFrame","path","siteName","metricName","datasourceRequest","method","then","response","formatRawBeluga","output","series","map","item","index","datapoints","d","status","message","title","preHeader","date","tokenId","id","token","secret","toISOString","authHeader","HmacSHA512","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","dimension","mapToTextValue","bind","resultKeys","push","i","r","text","value","concat","refId"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;AACAC,c;;AACAC,Y;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;;AAEA;AACA,eAAKK,QAAL,GAAgB,EAAhB;;AAEA;AACA,eAAKC,gBAAL,GAAwB,EAAxB;AACD;;;;gCAEKC,O,EAAS;AAAA;;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;;AAEAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;AACA,gBAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKV,CAAL,CAAOW,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,gBAAIC,SAASV,QAAQG,OAAR,CAAgB,CAAhB,CAAb;;AAEA,gBAAIQ,SAASC,KAAKC,KAAL,CAAWC,KAAKC,KAAL,CAAWf,QAAQgB,KAAR,CAAcC,IAAd,CAAmBC,EAA9B,IAAkC,IAA7C,EAAmDC,QAAnD,EAAb;AACA,gBAAIC,OAAOR,KAAKC,KAAL,CAAWC,KAAKC,KAAL,CAAWf,QAAQgB,KAAR,CAAcK,EAAd,CAAiBH,EAA5B,IAAgC,IAA3C,EAAiDC,QAAjD,EAAX;AACA,gBAAIG,YAAYX,SAAS,GAAT,GAAeS,IAA/B;;AAEA,gBAAIG,OAAO,yBAAyBb,OAAOc,QAAhC,GAA2C,GAA3C,GAAiDF,SAAjD,GAA6D,GAA7D,GAAmEZ,OAAOe,UAA1E,GAAuF,cAAlG;;AAEA,mBAAO,KAAKjC,UAAL,CAAgBkC,iBAAhB,CAAkC;AACvC/B,mBAAK,KAAKA,GAAL,GAAW4B,IADuB;AAEvCI,sBAAQ;AAF+B,aAAlC,EAINC,IAJM,CAID,oBAAY;AAChBC,uBAASpB,IAAT,GAAgB,MAAKqB,eAAL,CAAqBD,QAArB,CAAhB;AACA,qBAAOA,QAAP;AACD,aAPM,CAAP;AAQD;;;0CAEepB,I,EAAM;AACpB,gBAAIsB,SAAS,EAAb;AACA,gBAAItB,KAAKA,IAAL,CAAUuB,MAAd,EAAsB;AACpBvB,qBAAOA,KAAKA,IAAL,CAAUuB,MAAjB;AACD;AACD9C,cAAE+C,GAAF,CAAMxB,IAAN,EAAY,UAACyB,IAAD,EAAOC,KAAP,EAAiB;AAC3B,kBAAIC,aAAalD,EAAE+C,GAAF,CAAMxB,KAAK0B,KAAL,EAAY1B,IAAlB,EAAwB,UAAC4B,CAAD,EAAO;AAC9C,uBAAO,CAACA,EAAE,CAAF,CAAD,EAAOA,EAAE,CAAF,CAAP,CAAP;AACD,eAFgB,CAAjB;AAGAN,qBAAOI,KAAP,IAAgB;AACd,0BAAU1B,KAAK0B,KAAL,EAAYvC,IADR;AAEd,8BAAcwC;AAFA,eAAhB;AAID,aARD;AASA,mBAAOL,MAAP;AACD;;;2CAEgB;AAAA;;AACf,mBAAO,KAAKvC,UAAL,CAAgBkC,iBAAhB,CAAkC;AACvC/B,mBAAK,KAAKA,GAAL,GAAW,kBADuB;AAEvCgC,sBAAQ;AAF+B,aAAlC,EAGJC,IAHI,CAGC,oBAAY;AAClB,kBAAIC,SAASS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAKxC,QAAL,GAAgB+B,SAASpB,IAAzB;AACA,uBAAO;AACL6B,0BAAQ,SADH;AAELC,2BAAS,wBAFJ;AAGLC,yBAAO;AAHF,iBAAP;AAKD;AACF,aAZM,CAAP;AAaD;;;2CAGgBb,M,EAAQJ,I,EAAM;AAC7B;AACA,gBAAIkB,YAAYd,SAAS,GAAT,GAAeJ,IAAf,GAAsB,GAAtC;AACA,gBAAImB,OAAOtD,QAAX;AACA,gBAAIuD,UAAU,KAAK7C,QAAL,CAAc8C,EAA5B;AACA,gBAAIC,QAAQ,KAAK/C,QAAL,CAAcgD,MAA1B;AACAJ,mBAAOA,KAAKK,WAAL,EAAP;AACA;AACAN,wBAAYA,YAAYC,IAAxB;;AAEA;AACA,gBAAIM,aAAa7D,SAAS8D,UAAT,CAAoBR,SAApB,EAA+BI,KAA/B,EAAsC1B,QAAtC,EAAjB;AACA6B,yBAAa,WAAWL,OAAX,GAAqB,GAArB,GAA2BK,UAAxC;;AAEA,mBAAOA,UAAP;AACD;;;0CAEehD,O,EAAS;AACvB,gBAAIC,QAAQ,KAAKR,WAAL,CAAiByD,OAAjB,CAAyBlD,QAAQmD,UAAR,CAAmBlD,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,gBAAImD,kBAAkB;AACpBpC,qBAAOhB,QAAQgB,KADK;AAEpBmC,0BAAY;AACVvD,sBAAMI,QAAQmD,UAAR,CAAmBvD,IADf;AAEVyD,4BAAYrD,QAAQmD,UAAR,CAAmBE,UAFrB;AAGVC,wBAAQtD,QAAQmD,UAAR,CAAmBG,MAHjB;AAIVC,2BAAWvD,QAAQmD,UAAR,CAAmBI,SAJpB;AAKVtD,uBAAOA;AALG,eAFQ;AASpBuD,wBAAUxD,QAAQwD;AATE,aAAtB;;AAYA,mBAAO,KAAKhE,UAAL,CAAgBkC,iBAAhB,CAAkC;AACvC/B,mBAAK,KAAKA,GAAL,GAAW,cADuB;AAEvCgC,sBAAQ,MAF+B;AAGvClB,oBAAM2C;AAHiC,aAAlC,EAIJxB,IAJI,CAIC,kBAAU;AAChB,qBAAO6B,OAAOhD,IAAd;AACD,aANM,CAAP;AAOD;;;0CAEeT,O,EAAS0D,S,EAAW;AAClC,gBAAInC,OAAO,EAAX;AACA,gBAAIvB,YAAY,OAAhB,EAAyB;AACvBuB,qBAAO,iBAAiBvB,OAAxB;AACA,mBAAKD,gBAAL,GAAwBC,OAAxB;AACD,aAHD,MAIK,IAAI0D,cAAc,OAAlB,EAA2B;AAC9BnC,qBAAO,iBAAiBmC,SAAxB;AACA,mBAAK3D,gBAAL,GAAwB2D,SAAxB;AACD,aAHI,MAIA,IAAIA,cAAc,SAAlB,EAA6B;AAChCnC,qBAAO,iBAAiBmC,SAAxB;AACAnC,qBAAOA,OAAO,GAAP,GAAc,KAAK9B,WAAL,CAAiByD,OAAjB,CAAyBlD,QAAQwB,QAAjC,CAArB;AACA,mBAAKzB,gBAAL,GAAwB,OAAxB;AACD,aAJI,MAIE;AACLwB,qBAAO,EAAP;AACD;;AAED,mBAAO,KAAK/B,UAAL,CAAgBkC,iBAAhB,CAAkC;AACvC/B,mBAAK,KAAKA,GAAL,GAAW4B,IADuB;AAEvCI,sBAAQ;AAF+B,aAAlC,EAGJC,IAHI,CAGC,KAAK+B,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAHD,CAAP;AAID;;;yCAEcH,M,EAAQ;AACrB,gBAAII,aAAa,EAAjB;AACAA,uBAAWC,IAAX,CAAgB,KAAK/D,gBAArB;;AAEA;AACA;AACA,gBAAI,KAAKA,gBAAL,KAA0B,OAA9B,EAAuC;AACrC8D,yBAAWC,IAAX,CAAgB,OAAhB;AACAD,yBAAWC,IAAX,CAAgB,QAAhB;AACD;;AAED,gBAAIjC,WAAW,EAAf;AACA,iBAAK,IAAIkC,IAAI,CAAb,EAAeA,IAAIF,WAAWtD,MAA9B,EAAqCwD,GAArC,EAA0C;AACxC,kBAAIC,IAAI9E,EAAE+C,GAAF,CAAMwB,OAAOhD,IAAP,CAAYoD,WAAWE,CAAX,CAAZ,CAAN,EAAkC,UAAC1B,CAAD,EAAO;AAC/C,uBAAO;AACL4B,wBAAM5B,EAAEzC,IADH;AAELsE,yBAAO7B,EAAEzC;AAFJ,iBAAP;AAID,eALO,CAAR;AAMAiC,yBAAWA,SAASsC,MAAT,CAAgBH,CAAhB,CAAX;AACD;AACD,mBAAOnC,QAAP;AACD;;;+CAEoB7B,O,EAAS;AAAA;;AAC5B,gBAAIG,UAAUjB,EAAE+C,GAAF,CAAMjC,QAAQG,OAAd,EAAuB,kBAAU;AAC7C,qBAAO;AACLO,wBAAQ,OAAKjB,WAAL,CAAiByD,OAAjB,CAAyBxC,OAAOA,MAAhC,CADH;AAEL0D,uBAAO1D,OAAO0D,KAFT;AAGL9D,sBAAMI,OAAOJ,IAHR;AAILZ,sBAAMgB,OAAOhB,IAAP,IAAe,WAJhB;AAKL8B,0BAAU,OAAK/B,WAAL,CAAiByD,OAAjB,CAAyBxC,OAAOc,QAAhC,CALL;AAMLC,4BAAY,OAAKhC,WAAL,CAAiByD,OAAjB,CAAyBxC,OAAOe,UAAhC;AANP,eAAP;AAQD,aATa,CAAd;;AAWAzB,oBAAQG,OAAR,GAAkBA,OAAlB;;AAEA,mBAAOH,OAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport CryptoJS from \"../crypto-js\";\nimport moment from \"../moment\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n\n    // Object to hold Token after auth\n    this.tokenObj = {};\n\n    // used by the mapToTextValue conversion helper\n    this.currentDimension = \"\";\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n\n    query.targets = query.targets.filter(t => !t.hide);\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var target = options.targets[0];\n\n    var rStart = Math.round(Date.parse(options.range.from._d)/1000).toString();\n    var rEnd = Math.round(Date.parse(options.range.to._d)/1000).toString();\n    var timeFrame = rStart + '-' + rEnd;\n\n    var path = '/api/cdn/v2/metrics/' + target.siteName + '/' + timeFrame + '/' + target.metricName + '?output=json';\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + path,\n      method: 'GET'\n    })\n    .then(response => {\n      response.data = this.formatRawBeluga(response);\n      return response;\n    });\n  }\n\n  formatRawBeluga(data) {\n    var output = [];\n    if (data.data.series) {\n      data = data.data.series;\n    }\n    _.map(data, (item, index) => {\n      var datapoints = _.map(data[index].data, (d) => {\n        return [d[1], d[0]];\n      });\n      output[index] = {\n        \"target\": data[index].name,\n        \"datapoints\": datapoints\n      };\n    });\n    return output;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/token/token',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        this.tokenObj = response.data;\n        return {\n          status: \"success\",\n          message: \"Data source is working\",\n          title: \"Success\"\n        };\n      }\n    });\n  }\n\n  // currently not being used\n  createAuthHeader(method, path) {\n    // Put together header to be HMAC-ed\n    var preHeader = method + \":\" + path + \":\";\n    var date = moment();\n    var tokenId = this.tokenObj.id;\n    var token = this.tokenObj.secret;\n    date = date.toISOString();\n    // date = date + \"Z\";\n    preHeader = preHeader + date;\n\n    // HMAC preHeader\n    var authHeader = CryptoJS.HmacSHA512(preHeader, token).toString();\n    authHeader = \"Token \" + tokenId + \" \" + authHeader;\n\n    return authHeader;\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options, dimension) {\n    var path = '';\n    if (options === 'sites') {\n      path = \"/api/cdn/v2/\" + options;\n      this.currentDimension = options;\n    }\n    else if (dimension === \"sites\") {\n      path = \"/api/cdn/v2/\" + dimension;\n      this.currentDimension = dimension;\n    }\n    else if (dimension === \"metrics\") {\n      path = \"/api/cdn/v2/\" + dimension;\n      path = path + \"/\" +  this.templateSrv.replace(options.siteName);\n      this.currentDimension = \"views\";\n    } else {\n      path = \"\";\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + path,\n      method: 'GET'\n    }).then(this.mapToTextValue.bind(this));\n  }\n\n  mapToTextValue(result) {\n    var resultKeys = [];\n    resultKeys.push(this.currentDimension);\n\n    // parse available data responses based for metrics\n    // https://docs.belugacdn.com/v2/docs/metrics-list\n    if (this.currentDimension === 'views') {\n      resultKeys.push('codes');\n      resultKeys.push('fields');\n    }\n\n    var response = [];\n    for (var i = 0;i < resultKeys.length;i++) {\n      var r = _.map(result.data[resultKeys[i]], (d) => {\n        return {\n          text: d.name,\n          value: d.name\n        };\n      });\n      response = response.concat(r);\n    }\n    return response;\n  }\n\n  buildQueryParameters(options) {\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        siteName: this.templateSrv.replace(target.siteName),\n        metricName: this.templateSrv.replace(target.metricName)\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}